/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EventLogService } from "../eventLog.service";
import { EventLogCreateInput } from "./EventLogCreateInput";
import { EventLog } from "./EventLog";
import { EventLogFindManyArgs } from "./EventLogFindManyArgs";
import { EventLogWhereUniqueInput } from "./EventLogWhereUniqueInput";
import { EventLogUpdateInput } from "./EventLogUpdateInput";

export class EventLogControllerBase {
  constructor(protected readonly service: EventLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventLog })
  async createEventLog(
    @common.Body() data: EventLogCreateInput
  ): Promise<EventLog> {
    return await this.service.createEventLog({
      data: {
        ...data,

        userActivity: data.userActivity
          ? {
              connect: data.userActivity,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        timestamp: true,

        userActivity: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EventLog] })
  @ApiNestedQuery(EventLogFindManyArgs)
  async eventLogs(@common.Req() request: Request): Promise<EventLog[]> {
    const args = plainToClass(EventLogFindManyArgs, request.query);
    return this.service.eventLogs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        timestamp: true,

        userActivity: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async eventLog(
    @common.Param() params: EventLogWhereUniqueInput
  ): Promise<EventLog | null> {
    const result = await this.service.eventLog({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        timestamp: true,

        userActivity: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEventLog(
    @common.Param() params: EventLogWhereUniqueInput,
    @common.Body() data: EventLogUpdateInput
  ): Promise<EventLog | null> {
    try {
      return await this.service.updateEventLog({
        where: params,
        data: {
          ...data,

          userActivity: data.userActivity
            ? {
                connect: data.userActivity,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          eventType: true,
          timestamp: true,

          userActivity: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEventLog(
    @common.Param() params: EventLogWhereUniqueInput
  ): Promise<EventLog | null> {
    try {
      return await this.service.deleteEventLog({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          eventType: true,
          timestamp: true,

          userActivity: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
