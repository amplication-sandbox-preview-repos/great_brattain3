/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EventLog as PrismaEventLog,
  UserActivity as PrismaUserActivity,
} from "@prisma/client";

export class EventLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EventLogCountArgs, "select">): Promise<number> {
    return this.prisma.eventLog.count(args);
  }

  async eventLogs(
    args: Prisma.EventLogFindManyArgs
  ): Promise<PrismaEventLog[]> {
    return this.prisma.eventLog.findMany(args);
  }
  async eventLog(
    args: Prisma.EventLogFindUniqueArgs
  ): Promise<PrismaEventLog | null> {
    return this.prisma.eventLog.findUnique(args);
  }
  async createEventLog(
    args: Prisma.EventLogCreateArgs
  ): Promise<PrismaEventLog> {
    return this.prisma.eventLog.create(args);
  }
  async updateEventLog(
    args: Prisma.EventLogUpdateArgs
  ): Promise<PrismaEventLog> {
    return this.prisma.eventLog.update(args);
  }
  async deleteEventLog(
    args: Prisma.EventLogDeleteArgs
  ): Promise<PrismaEventLog> {
    return this.prisma.eventLog.delete(args);
  }

  async getUserActivity(parentId: string): Promise<PrismaUserActivity | null> {
    return this.prisma.eventLog
      .findUnique({
        where: { id: parentId },
      })
      .userActivity();
  }
}
