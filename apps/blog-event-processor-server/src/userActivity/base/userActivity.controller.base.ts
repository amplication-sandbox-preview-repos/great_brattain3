/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserActivityService } from "../userActivity.service";
import { UserActivityCreateInput } from "./UserActivityCreateInput";
import { UserActivity } from "./UserActivity";
import { UserActivityFindManyArgs } from "./UserActivityFindManyArgs";
import { UserActivityWhereUniqueInput } from "./UserActivityWhereUniqueInput";
import { UserActivityUpdateInput } from "./UserActivityUpdateInput";
import { EventLogFindManyArgs } from "../../eventLog/base/EventLogFindManyArgs";
import { EventLog } from "../../eventLog/base/EventLog";
import { EventLogWhereUniqueInput } from "../../eventLog/base/EventLogWhereUniqueInput";

export class UserActivityControllerBase {
  constructor(protected readonly service: UserActivityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserActivity })
  async createUserActivity(
    @common.Body() data: UserActivityCreateInput
  ): Promise<UserActivity> {
    return await this.service.createUserActivity({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        user: true,
        action: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserActivity] })
  @ApiNestedQuery(UserActivityFindManyArgs)
  async userActivities(
    @common.Req() request: Request
  ): Promise<UserActivity[]> {
    const args = plainToClass(UserActivityFindManyArgs, request.query);
    return this.service.userActivities({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        user: true,
        action: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userActivity(
    @common.Param() params: UserActivityWhereUniqueInput
  ): Promise<UserActivity | null> {
    const result = await this.service.userActivity({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        user: true,
        action: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserActivity(
    @common.Param() params: UserActivityWhereUniqueInput,
    @common.Body() data: UserActivityUpdateInput
  ): Promise<UserActivity | null> {
    try {
      return await this.service.updateUserActivity({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          user: true,
          action: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserActivity(
    @common.Param() params: UserActivityWhereUniqueInput
  ): Promise<UserActivity | null> {
    try {
      return await this.service.deleteUserActivity({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          user: true,
          action: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/eventLogs")
  @ApiNestedQuery(EventLogFindManyArgs)
  async findEventLogs(
    @common.Req() request: Request,
    @common.Param() params: UserActivityWhereUniqueInput
  ): Promise<EventLog[]> {
    const query = plainToClass(EventLogFindManyArgs, request.query);
    const results = await this.service.findEventLogs(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        timestamp: true,

        userActivity: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/eventLogs")
  async connectEventLogs(
    @common.Param() params: UserActivityWhereUniqueInput,
    @common.Body() body: EventLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventLogs: {
        connect: body,
      },
    };
    await this.service.updateUserActivity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/eventLogs")
  async updateEventLogs(
    @common.Param() params: UserActivityWhereUniqueInput,
    @common.Body() body: EventLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventLogs: {
        set: body,
      },
    };
    await this.service.updateUserActivity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/eventLogs")
  async disconnectEventLogs(
    @common.Param() params: UserActivityWhereUniqueInput,
    @common.Body() body: EventLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventLogs: {
        disconnect: body,
      },
    };
    await this.service.updateUserActivity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
